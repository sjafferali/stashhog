name: Main Branch CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
        
    - name: Run tests
      run: |
        cd backend
        python -m pytest
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run tests
      run: |
        cd frontend
        npm run test:coverage -- --ci --maxWorkers=2
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Backend Linting
  backend-lint:
    runs-on: ubuntu-latest
    name: Backend Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        
    - name: Run Black
      run: |
        cd backend
        black --check .
        
    - name: Run isort
      run: |
        cd backend
        isort --check-only .
        
    - name: Run Flake8
      run: |
        cd backend
        flake8 .
        
    - name: Run MyPy
      run: |
        cd backend
        pip install -r requirements.txt
        mypy app/ --ignore-missing-imports

  # Frontend Linting
  frontend-lint:
    runs-on: ubuntu-latest
    name: Frontend Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
        
    - name: Check Prettier formatting
      run: |
        cd frontend
        npm run format:check
        
    - name: Run TypeScript check
      run: |
        cd frontend
        npm run type-check

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Security Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Check Python dependencies
      run: |
        pip install safety
        cd backend
        safety check -r requirements.txt --json || true
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Check npm dependencies
      run: |
        cd frontend
        npm audit --json || true

  # Docker Build (runs in parallel with tests)
  docker-build:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    name: Docker Build (Parallel)
    permissions:
      contents: read
      packages: write
    outputs:
      temp-tag: build-${{ github.run_id }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push with temporary tag
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: docker.io/${{ github.repository }}:build-${{ github.run_id }}
        # Registry cache only for performance comparison
        cache-from: type=registry,ref=docker.io/${{ github.repository }}:buildcache
        cache-to: type=registry,ref=docker.io/${{ github.repository }}:buildcache,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON('{"timestamp":""}').timestamp || github.event.head_commit.timestamp }}
          VERSION=${{ github.ref_name }}
          REVISION=${{ github.sha }}

  # Docker Push (only after all tests pass)
  docker-push:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, backend-lint, frontend-lint, security-scan, docker-build]
    name: Docker Push
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: docker.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=,suffix=,format=short
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Create and push manifest with final tags
      run: |
        SOURCE_IMAGE="docker.io/${{ github.repository }}:${{ needs.docker-build.outputs.temp-tag }}"
        
        # Build the tag list for imagetools
        TAGS=""
        while IFS= read -r tag; do
          if [ -n "$tag" ]; then
            TAGS="$TAGS --tag $tag"
          fi
        done <<< "${{ steps.meta.outputs.tags }}"
        
        # Create manifest with all tags at once (no pull/push of layers needed!)
        echo "Creating manifest with tags:"
        echo "${{ steps.meta.outputs.tags }}"
        
        docker buildx imagetools create \
          $TAGS \
          $SOURCE_IMAGE
        
    - name: Send webhook notification
      uses: distributhor/workflow-webhook@v3
      env:
        webhook_url: ${{ secrets.WEBHOOK_URL }}
        webhook_secret: ${{ secrets.WEBHOOK_SECRET }}

  # All checks passed
  ci-success:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, backend-lint, frontend-lint, security-scan, dependency-check, docker-push]
    if: always()
    name: CI Success
    steps:
    - name: Check status
      run: |
        if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
          echo "One or more jobs failed"
          exit 1
        else
          echo "All CI checks passed!"
        fi