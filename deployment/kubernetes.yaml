---
# Kubernetes deployment configuration for StashHog
# Apply with: kubectl apply -f deployment/kubernetes.yaml

apiVersion: v1
kind: Namespace
metadata:
  name: stashhog
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: stashhog-config
  namespace: stashhog
data:
  APP_ENV: "production"
  APP_NAME: "StashHog"
  DEBUG: "false"
  LOG_LEVEL: "info"
  DATABASE_URL: "sqlite:////data/stashhog.db"
  API_WORKERS: "4"
  ENABLE_METRICS: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: stashhog-secrets
  namespace: stashhog
type: Opaque
stringData:
  SECRET_KEY: "change-this-secret-key-in-production"
  JWT_SECRET_KEY: "change-this-jwt-secret-key-in-production"
  STASH_API_KEY: ""
  OPENAI_API_KEY: ""
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: stashhog-data-pvc
  namespace: stashhog
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: stashhog-logs-pvc
  namespace: stashhog
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stashhog
  namespace: stashhog
  labels:
    app: stashhog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stashhog
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: stashhog
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: stashhog
        image: stashhog/stashhog:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
        envFrom:
        - configMapRef:
            name: stashhog-config
        - secretRef:
            name: stashhog-secrets
        env:
        - name: STASH_URL
          value: "http://stash-service:9999"
        volumeMounts:
        - name: data
          mountPath: /data
        - name: logs
          mountPath: /logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: stashhog-data-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: stashhog-logs-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: stashhog-service
  namespace: stashhog
  labels:
    app: stashhog
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: stashhog
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stashhog-ingress
  namespace: stashhog
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  tls:
  - hosts:
    - stashhog.example.com
    secretName: stashhog-tls
  rules:
  - host: stashhog.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: stashhog-service
            port:
              number: 80
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: stashhog-backup
  namespace: stashhog
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: alpine:latest
            command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache sqlite aws-cli
              timestamp=$(date +%Y%m%d_%H%M%S)
              sqlite3 /data/stashhog.db ".backup /tmp/stashhog_${timestamp}.db"
              # Upload to S3 (configure AWS credentials)
              # aws s3 cp /tmp/stashhog_${timestamp}.db s3://your-backup-bucket/stashhog/
            volumeMounts:
            - name: data
              mountPath: /data
              readOnly: true
          volumes:
          - name: data
            persistentVolumeClaim:
              claimName: stashhog-data-pvc
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: stashhog-hpa
  namespace: stashhog
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: stashhog
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: stashhog-metrics
  namespace: stashhog
  labels:
    app: stashhog
spec:
  selector:
    matchLabels:
      app: stashhog
  endpoints:
  - port: http
    path: /metrics
    interval: 30s